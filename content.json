{"meta":{"title":"谢昊璋的博客","subtitle":"","description":"","author":"谢昊璋","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-08-28T14:49:15.000Z","updated":"2020-08-30T08:50:50.396Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-28T14:46:49.000Z","updated":"2020-08-30T06:06:48.530Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++中resize函数在vector中的使用","slug":"C++中resize函数在vector中的使用","date":"2020-09-02T06:29:13.000Z","updated":"2020-09-02T06:54:30.077Z","comments":true,"path":"2020/09/02/C++中resize函数在vector中的使用/","link":"","permalink":"http://yoursite.com/2020/09/02/C++%E4%B8%ADresize%E5%87%BD%E6%95%B0%E5%9C%A8vector%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"&emsp;&emsp;在C++中typeid函数用于查看表达式的类型信息，包含在头文件 typeinfo 中。resize可以根据一个vector容器的大小为另一个容器开辟空间 #include&lt;iostream&gt;#include&lt;typeinfo&gt;#include&lt;opencv2/opencv.hpp&gt;int main()&#123; std::vector&lt;int&gt; layer_neuron_num = &#123; 400,80,2 &#125;; std::vector&lt;cv::Mat&gt; layer; // layer中包含三个Mat类型的数据 layer.resize(layer_neuron_num.size()); std::cout &lt;&lt; &quot;typeid(layer_neuron_num).name() = &quot; &lt;&lt; typeid(layer_neuron_num).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer_neuron_num.size()).name = &quot; &lt;&lt; typeid(layer_neuron_num.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer_neuron_num.size() = &quot; &lt;&lt; layer_neuron_num.size() &lt;&lt; std::endl; std::cout &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer).name() = &quot; &lt;&lt; typeid(layer).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer.size()).name() = &quot; &lt;&lt; typeid(layer.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer.size() = &quot; &lt;&lt; layer.size() &lt;&lt; std::endl;&#125; vector的类型信息typeid(layer_neuron_num).name() = class std::vector&lt;int,class std::allocator &gt; vector.size()的类型信息typeid(layer_neuron_num.size()).name = unsigned __int64 layer_neuron_num的大小是3，表示包含三个int类型的数据layer_neuron_num.size() = 3 vector的类型信息typeid(layer).name() = class std::vector&lt;class cv::Mat,class std::allocator &gt; vector.size() 的类型信息typeid(layer.size()).name() = unsigned __int64 layer的大小为3，表示有3个Mat类型的数据layer.size() = 3","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"引用(Reference)","slug":"引用","date":"2020-08-30T08:31:12.000Z","updated":"2020-09-01T13:50:33.524Z","comments":true,"path":"2020/08/30/引用/","link":"","permalink":"http://yoursite.com/2020/08/30/%E5%BC%95%E7%94%A8/","excerpt":"","text":"1.引用即别名&emsp;&emsp;引用并非对象，相反地，它只是为一个已经存在的对象所起的另一个名字。定义了一个引用以后，对其进行的所有操作都是在与之绑定的对象上进行的。 2.引用和指针&emsp;&emsp;引用的本质是指针，引用是C++对裸露的内存地址（指针）做的包装。 1. 可以定义指针的引用，但不能定义引用的引用 指针的引用 ：rpa 绑定的是一个地址。 int a = 100;int *pa = &amp;a;int * &amp;rpa = pa; 引用的引用 ：与指针不同的是，引用没有二级引用，也就是说引用int&amp;类型对象的对象也是int&amp;类型。 int a = 100;int &amp;b = a;// int &amp;&amp; c = a; //errorint &amp; c = a; //ok 2. 可以定义指针的指针，但不能定义引用的指针 指针的指针 ：指向指针的指针也就是二级指针，在C++中这是合法的。 int a = 100;int * pa = &amp;a;int **ppa = &amp;pa; 引用的指针 ：引用只是一个别名。 int a = 100;int &amp; ra = a;// int&amp;* rpa = &amp;ra; // error 3. 可以定义指针数组，但不能定义引用数组，可以定义数组引用 指针数组 :即存放指针(地址)的数组 int a, b, c;int* arr[] = &#123;&amp;a, &amp;b, &amp;c&#125;; 引用数组 :非法定义，r是一个数组的首地址，int &amp;r[]相当于int&amp;*，前面提到引用的指针是不合法的。int a, b, c;// int &amp;r [] = {a, b ,c}; //error 数组引用 :arr 是int [5] 类型int arr[] = {1,2,3,4,5};int (&amp;rarr)[5] = arr; 3.常引用","categories":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}