{"meta":{"title":"谢昊璋的博客","subtitle":"","description":"","author":"谢昊璋","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-08-28T14:49:15.000Z","updated":"2020-08-30T08:50:50.396Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-28T14:46:49.000Z","updated":"2020-08-30T06:06:48.530Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"图像预处理","slug":"图像预处理","date":"2020-10-07T14:17:55.000Z","updated":"2020-10-08T13:34:32.828Z","comments":true,"path":"2020/10/07/图像预处理/","link":"","permalink":"http://yoursite.com/2020/10/07/%E5%9B%BE%E5%83%8F%E9%A2%84%E5%A4%84%E7%90%86/","excerpt":"","text":"图像显示与存储原理颜色空间&emsp;&emsp;1.RGB颜色空间&emsp;&emsp;(1).加法混色：越叠加越白&emsp;&emsp;(2).三个通道：Red、Green、Blue&emsp;&emsp;(3).一个像素颜色值（b, g, r）&emsp;&emsp;(4).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;2.CMY(K)颜色空间&emsp;&emsp;(1).减法混色：越叠加越黑&emsp;&emsp;(2).四个通道：Cyan、Magenta、Yellow、Key&emsp;&emsp;(3).一个像素颜色值 (c, m, y, k)&emsp;&emsp;(4).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;3.HSV颜色空间&emsp;&emsp;(1).三个要素&emsp;&emsp;&emsp;&emsp;H/Hue: 色调，颜色种类&emsp;&emsp;&emsp;&emsp;H/S/Saturation: 饱和度，颜色的纯度&emsp;&emsp;&emsp;&emsp;V/Value: 明度，颜色明亮度&emsp;&emsp;(2).一个像素颜色值 (h, v, s)&emsp;&emsp;(3).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;4.CIE-XYZ颜色空间&emsp;&emsp;(1).基于人类颜色视觉的直接测定，是其他颜色空间的基础&emsp;&emsp;(2).人类视觉系统-视锥细胞&emsp;&emsp;&emsp;&emsp;短波 (S, 420-440nm)&emsp;&emsp;&emsp;&emsp;中波 (M, 530-540nm)&emsp;&emsp;&emsp;&emsp;长波 (L, 560-580nm)&emsp;&emsp;(3).三色刺激性通道：X、Y、Z约略对应于红色、绿色、蓝色，一种波的刺激等于几种波的混合刺激 图像存储原理&emsp;&emsp;1.主流颜色空间&emsp;&emsp;(1) RGB三通道彩色图&emsp;&emsp;(2) 单通道灰度图&emsp;&emsp;&emsp;&emsp;Gray = R0.3 + G0.59 + B0.11*&emsp;&emsp;2.常见的存储格式.&emsp;&emsp;&emsp;&emsp;bmp、jpg、png、tiff、gif、pcx、tag、exif、fpx、svag、psd、cdr、pcd、cdr、pcd、dxf、ufo、eps、ai、raw、WMF、webp 图像增强的目标&emsp;&emsp;1.改善图像的视觉效果 &emsp;&emsp;2.转换为更适合人或者机器分析处理的形式 &emsp;&emsp;3.突出对人或机器分析有意义的信息 &emsp;&emsp;4.抑制无用信息，提高图像的使用价值 点运算：基于直方图的对比增强直方图均衡化&emsp;&emsp;直方图均衡化是指利用图像直方图对对比度进行调整的方法。直方图均衡化通常用来增加许多图像的局部对比度，尤其是当图片的有用数据的对比度相当接近的时候。直方图均衡化之后，亮度可以更好地在直方图对上分布。这样就可以用于增强局部对比度而不影响整体对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。&emsp;&emsp;直方图均衡化实际上是对图像进行非线性拉伸，重新分配各个灰度单位中像素的数量，使一定灰度范围像素点数量的值大致相等。 自适应直方图均衡&emsp;&emsp;直方图均衡的经典算法对整幅图像的像素使用相同的变换，如果图像中包括明显亮的或者暗的区域，则经典算法作用有限&emsp;&emsp;自适应直方图均衡（AHE）算法通过对局部区域进行直方图的均衡来解决上述问题。AHE会让移动模板在原始图片上按特定步长活动，每次移动后模板区域内做直方图均衡，映射后的结果赋值给模板区域内的所有点。每个店会有多次赋值，最终值为这些赋值的均值。 对比度受限的自适应直方图均衡化&emsp;&emsp;AHE会过度放大图像中相对均匀区域的噪音，可采用限制对比度自适应直方图均衡化（CLAHE）。与普通的自适应直方图均衡相比，CLAHE的不同之处在于直方图修剪的过程中，用修剪后的直方图均衡图像时，图像对比度会更自然。 形态学处理空间域处理：卷积卷积的应用频率域处理：傅里叶变换、 小波变换应用案例","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C++中resize函数在vector中的使用","slug":"C++中resize函数在vector中的使用","date":"2020-09-02T06:29:13.000Z","updated":"2020-09-02T06:54:30.077Z","comments":true,"path":"2020/09/02/C++中resize函数在vector中的使用/","link":"","permalink":"http://yoursite.com/2020/09/02/C++%E4%B8%ADresize%E5%87%BD%E6%95%B0%E5%9C%A8vector%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"&emsp;&emsp;在C++中typeid函数用于查看表达式的类型信息，包含在头文件 typeinfo 中。resize可以根据一个vector容器的大小为另一个容器开辟空间 #include&lt;iostream&gt;#include&lt;typeinfo&gt;#include&lt;opencv2/opencv.hpp&gt;int main()&#123; std::vector&lt;int&gt; layer_neuron_num = &#123; 400,80,2 &#125;; std::vector&lt;cv::Mat&gt; layer; // layer中包含三个Mat类型的数据 layer.resize(layer_neuron_num.size()); std::cout &lt;&lt; &quot;typeid(layer_neuron_num).name() = &quot; &lt;&lt; typeid(layer_neuron_num).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer_neuron_num.size()).name = &quot; &lt;&lt; typeid(layer_neuron_num.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer_neuron_num.size() = &quot; &lt;&lt; layer_neuron_num.size() &lt;&lt; std::endl; std::cout &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer).name() = &quot; &lt;&lt; typeid(layer).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer.size()).name() = &quot; &lt;&lt; typeid(layer.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer.size() = &quot; &lt;&lt; layer.size() &lt;&lt; std::endl;&#125; vector的类型信息typeid(layer_neuron_num).name() = class std::vector&lt;int,class std::allocator &gt; vector.size()的类型信息typeid(layer_neuron_num.size()).name = unsigned __int64 layer_neuron_num的大小是3，表示包含三个int类型的数据layer_neuron_num.size() = 3 vector的类型信息typeid(layer).name() = class std::vector&lt;class cv::Mat,class std::allocator &gt; vector.size() 的类型信息typeid(layer.size()).name() = unsigned __int64 layer的大小为3，表示有3个Mat类型的数据layer.size() = 3","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"引用(Reference)","slug":"引用","date":"2020-08-30T08:31:12.000Z","updated":"2020-09-01T13:50:33.524Z","comments":true,"path":"2020/08/30/引用/","link":"","permalink":"http://yoursite.com/2020/08/30/%E5%BC%95%E7%94%A8/","excerpt":"","text":"1.引用即别名&emsp;&emsp;引用并非对象，相反地，它只是为一个已经存在的对象所起的另一个名字。定义了一个引用以后，对其进行的所有操作都是在与之绑定的对象上进行的。 2.引用和指针&emsp;&emsp;引用的本质是指针，引用是C++对裸露的内存地址（指针）做的包装。 1. 可以定义指针的引用，但不能定义引用的引用 指针的引用 ：rpa 绑定的是一个地址。 int a = 100;int *pa = &amp;a;int * &amp;rpa = pa; 引用的引用 ：与指针不同的是，引用没有二级引用，也就是说引用int&amp;类型对象的对象也是int&amp;类型。 int a = 100;int &amp;b = a;// int &amp;&amp; c = a; //errorint &amp; c = a; //ok 2. 可以定义指针的指针，但不能定义引用的指针 指针的指针 ：指向指针的指针也就是二级指针，在C++中这是合法的。 int a = 100;int * pa = &amp;a;int **ppa = &amp;pa; 引用的指针 ：引用只是一个别名。 int a = 100;int &amp; ra = a;// int&amp;* rpa = &amp;ra; // error 3. 可以定义指针数组，但不能定义引用数组，可以定义数组引用 指针数组 :即存放指针(地址)的数组 int a, b, c;int* arr[] = &#123;&amp;a, &amp;b, &amp;c&#125;; 引用数组 :非法定义，r是一个数组的首地址，int &amp;r[]相当于int&amp;*，前面提到引用的指针是不合法的。int a, b, c;// int &amp;r [] = {a, b ,c}; //error 数组引用 :arr 是int [5] 类型int arr[] = {1,2,3,4,5};int (&amp;rarr)[5] = arr; 3.常引用","categories":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}