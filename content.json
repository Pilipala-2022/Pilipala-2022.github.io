{"meta":{"title":"谢昊璋的博客","subtitle":"","description":"","author":"谢昊璋","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-08-28T14:49:15.000Z","updated":"2020-08-30T08:50:50.396Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-28T14:46:49.000Z","updated":"2020-08-30T06:06:48.530Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"未有深度学习之前","slug":"未有深度学习之前","date":"2020-10-11T01:28:53.000Z","updated":"2020-10-11T07:32:31.491Z","comments":true,"path":"2020/10/11/未有深度学习之前/","link":"","permalink":"http://yoursite.com/2020/10/11/%E6%9C%AA%E6%9C%89%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%89%8D/","excerpt":"","text":"图像分割&emsp;&emsp;经典的数字图像分割算法一般是基于灰度值的两个基本特征之一：不连续性和相似性 基于阈值的分割方法&emsp;&emsp;阈值法的基本思想是基于图像的灰度特征来计算一个或多个灰度阈值，并将图像中每个像素的灰度值与阈值相比较，最后将像素根据比较的结果分到合适的类别中。&emsp;&emsp;阈值法设定某一灰度阈值T，能将图片分成两部分：大于T的像素群和小于T的像素群。一个合适的阈值可以很好地将图像分割开来。 基于边缘的分割方法&emsp;&emsp; 所谓边缘是指图像中两个不同区域的边界线上连续的像素点的集合，是图像局部特征不连续性的反映，体现了灰度、颜色、纹理等图像特性的突变。&emsp;&emsp;基于边缘检测的图像分割方法的基本思路是先确定图像中的边缘像素，然后再把这些像素连接在一起就构成了所需的区域边界。 基于区域的分割方法&emsp;&emsp;此类方法是将图像按照相似性准则分成不同的区域，主要包括种子区域生长法、区域分类合并法和分水岭算法等几种类型。 区域生长法&emsp;&emsp;区域生长是根据一种事先定义的准则将像素或者子区域聚合成更大区域的过程，并且要充分保证分割后的区域满足以下条件：内部连通、互斥、且各子集的并集能构成全集。&emsp;&emsp;区域生长的条件实际上就是根据像素灰度间的连续性而定义的一些相似性准则，而区域生长停止的条件是一个终止规则。&emsp;&emsp;算法定义了最大像素灰度值距离，当待加入像素点的灰度值和已经分割好的区域所有像素点的平均灰度值的差的绝对值不大于最大灰度值距离时，该像素加入到已经分割到的区域。相反，则区域生长算法停止。 分水岭算法&emsp;&emsp;分水岭算法是一种图像区域分割法，分水岭算法可以将图像中的边缘转换成“山脉”，将均匀区域转换成“山谷”，这样有助于分割目标。&emsp;&emsp;在分割过程中，它会打跟临近像素间的相似性作为重要的参考依据，从而将在空间位置上相近并且灰度值相近（求梯度）的像素点互相连接起来构成一个封闭的轮廓。&emsp;&emsp;分水岭算法先把彩色图像灰度化，然后再求梯度图，最后在梯度图的基础上进行分水岭算法，求得分段图像的边缘线。 基于图论的分割方法&emsp;&emsp;此类方法把图像分割问题与图的最小割问题相关联。首先将图像映射为带权无向图，图中每个节点对应于图像中的每个像素，每条边的权值表示了相邻像素之间在灰度、颜色或纹理方面的非负相似度。 Graph Cuts&emsp;&emsp;Graph Cuts是基于图论的分割方法，是基于能量的算法。 GrabCut&emsp;&emsp;GrabCut分割只需要在目标外面画一个框，把目标框柱，它就可以完成良好的分割。如果增加额外的用户交互（由用户指定一些像素属于目标），那么效果会更加完美。 人脸检测Haar-like特征&emsp;&emsp;特征模板内有白色和黑色两种矩形，并定义该模板的特征值为白色矩形内的像素的和减去黑色矩形内的像素的和。 级联分类器&emsp;&emsp;级联分类器就是将多个强分类器连接在一起进行操作，而每一个强分类器都由若干个弱分类器加权组成。Adaboost就是一种基于级联分类模型的分类器。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"图像特征与描述","slug":"图像特征与描述","date":"2020-10-10T07:17:16.000Z","updated":"2020-10-11T01:33:38.222Z","comments":true,"path":"2020/10/10/图像特征与描述/","link":"","permalink":"http://yoursite.com/2020/10/10/%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E4%B8%8E%E6%8F%8F%E8%BF%B0/","excerpt":"","text":"颜色特征量化颜色直方图&emsp;&emsp;1.最常用的方法是将颜色空间的各个分量（维度）均匀地进行划分。&emsp;&emsp;2.适用颜色空间: RGB、HSV等颜色空间&emsp;&emsp;3.操作：&emsp;&emsp;&emsp;&emsp;(1)颜色空间量化，单元（bin）由单元中心代表&emsp;&emsp;&emsp;&emsp;(2)统计落在量化2单元上的像素数量 聚类颜色直方图&emsp;&emsp;1.聚类算法则考虑到图像颜色特征在整个空间的分布情况，避免出现大量的bin中的像素非常稀疏的情况&emsp;&emsp;2.适用颜色空间: Lab等颜色空间&emsp;&emsp;3.操作：&emsp;&emsp;&emsp;&emsp;(1)使用聚类算法对所有像素点颜色向量进行聚类&emsp;&emsp;&emsp;&emsp;(2)单元（bin）由聚类中心代表 几何特征边缘（Edge）&emsp;&emsp;1.像素明显变化的区域&emsp;&emsp;2.具有丰富的语义信息&emsp;&emsp;3.用于物体识别，几何、视角变换&emsp;&emsp;4.边缘提取：&emsp;&emsp;&emsp;&emsp;(1)先高斯去噪，在使用一阶导数获取极值&emsp;&emsp;&emsp;&emsp;(2)导数对噪声敏感 基于特征点的特征描述子&emsp;&emsp;从不同距离、不同方向角度、不同光照条件下观察一个物体时，物体的大小、形状、明暗都会有所不同。但我们依然可以判断他是同一物体。&emsp;&emsp;理想的特征描述子应该具备这些性质。即在大小、方向、明暗不同的图像中，同一特征点应该具有足够相似的描述子，称之为描述子的可复现性。 特征点/关键点&emsp;&emsp;1.不同视角图片之间的映射&emsp;&emsp;2.局部稳定特征点：&emsp;&emsp;&emsp;&emsp;（1）可重复性、显著性&emsp;&emsp;&emsp;&emsp;（2）抗图片变换：外貌变换、几何变换","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"图像预处理","slug":"图像预处理","date":"2020-10-07T14:17:55.000Z","updated":"2020-10-11T01:33:15.616Z","comments":true,"path":"2020/10/07/图像预处理/","link":"","permalink":"http://yoursite.com/2020/10/07/%E5%9B%BE%E5%83%8F%E9%A2%84%E5%A4%84%E7%90%86/","excerpt":"","text":"图像显示与存储原理颜色空间&emsp;&emsp;1.RGB颜色空间&emsp;&emsp;(1).加法混色：越叠加越白&emsp;&emsp;(2).三个通道：Red、Green、Blue&emsp;&emsp;(3).一个像素颜色值（b, g, r）&emsp;&emsp;(4).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;2.CMY(K)颜色空间&emsp;&emsp;(1).减法混色：越叠加越黑&emsp;&emsp;(2).四个通道：Cyan、Magenta、Yellow、Key&emsp;&emsp;(3).一个像素颜色值 (c, m, y, k)&emsp;&emsp;(4).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;3.HSV颜色空间&emsp;&emsp;(1).三个要素&emsp;&emsp;&emsp;&emsp;H/Hue: 色调，颜色种类&emsp;&emsp;&emsp;&emsp;H/S/Saturation: 饱和度，颜色的纯度&emsp;&emsp;&emsp;&emsp;V/Value: 明度，颜色明亮度&emsp;&emsp;(2).一个像素颜色值 (h, v, s)&emsp;&emsp;(3).取值范围 [0, 255]、 [0.0, 1.0] &emsp;&emsp;4.CIE-XYZ颜色空间&emsp;&emsp;(1).基于人类颜色视觉的直接测定，是其他颜色空间的基础&emsp;&emsp;(2).人类视觉系统-视锥细胞&emsp;&emsp;&emsp;&emsp;短波 (S, 420-440nm)&emsp;&emsp;&emsp;&emsp;中波 (M, 530-540nm)&emsp;&emsp;&emsp;&emsp;长波 (L, 560-580nm)&emsp;&emsp;(3).三色刺激性通道：X、Y、Z约略对应于红色、绿色、蓝色，一种波的刺激等于几种波的混合刺激 图像存储原理&emsp;&emsp;1.主流颜色空间&emsp;&emsp;(1) RGB三通道彩色图&emsp;&emsp;(2) 单通道灰度图&emsp;&emsp;&emsp;&emsp;Gray = R0.3 + G0.59 + B0.11*&emsp;&emsp;2.常见的存储格式.&emsp;&emsp;&emsp;&emsp;bmp、jpg、png、tiff、gif、pcx、tag、exif、fpx、svag、psd、cdr、pcd、cdr、pcd、dxf、ufo、eps、ai、raw、WMF、webp 图像增强的目标&emsp;&emsp;1.改善图像的视觉效果 &emsp;&emsp;2.转换为更适合人或者机器分析处理的形式 &emsp;&emsp;3.突出对人或机器分析有意义的信息 &emsp;&emsp;4.抑制无用信息，提高图像的使用价值 点运算：基于直方图的对比增强直方图均衡化&emsp;&emsp;直方图均衡化是指利用图像直方图对对比度进行调整的方法。直方图均衡化通常用来增加许多图像的局部对比度，尤其是当图片的有用数据的对比度相当接近的时候。直方图均衡化之后，亮度可以更好地在直方图对上分布。这样就可以用于增强局部对比度而不影响整体对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。&emsp;&emsp;直方图均衡化实际上是对图像进行非线性拉伸，重新分配各个灰度单位中像素的数量，使一定灰度范围像素点数量的值大致相等。 自适应直方图均衡&emsp;&emsp;直方图均衡的经典算法对整幅图像的像素使用相同的变换，如果图像中包括明显亮的或者暗的区域，则经典算法作用有限&emsp;&emsp;自适应直方图均衡（AHE）算法通过对局部区域进行直方图的均衡来解决上述问题。AHE会让移动模板在原始图片上按特定步长活动，每次移动后模板区域内做直方图均衡，映射后的结果赋值给模板区域内的所有点。每个店会有多次赋值，最终值为这些赋值的均值。 对比度受限的自适应直方图均衡化&emsp;&emsp;AHE会过度放大图像中相对均匀区域的噪音，可采用限制对比度自适应直方图均衡化（CLAHE）。与普通的自适应直方图均衡相比，CLAHE的不同之处在于直方图修剪的过程中，用修剪后的直方图均衡图像时，图像对比度会更自然。 形态学处理&emsp;&emsp;通常有噪声的图像用阈值二值化后，所得到的边界是很不平滑的，物体区域具有一些错判的孔洞，背景区域散布一些小的噪声物体，连续的开和闭运算可以显著的改善这种情况。&emsp;&emsp;1.膨胀是图像中的高亮部分进行膨胀，类似于领域扩张。&emsp;&emsp;2.服饰是原图的高亮部分被腐蚀，类似于领域被蚕食。&emsp;&emsp;3.开运算是先腐蚀再膨胀，可以去掉目标外的孤立点。&emsp;&emsp;4.闭运算是先膨胀再腐蚀，可以去掉目标内的孔。 空间域处理及其变换滤波/卷积&emsp;&emsp;1.均值滤波本身存在缺陷，既没有很好地去除噪声点，也破坏了图像的细节反而使图像变得模糊。&emsp;&emsp;2.中值滤波能够有效地去除椒盐噪声&emsp;&emsp;3.高斯滤波模拟人眼，关注中心区域，能够有效地去除高斯噪声。 频率域处理：傅里叶变换、 小波变换傅里叶变换&emsp;&emsp;一个信号可以有足够多个不同频率和赋值的正余弦波组成 小波变换&emsp;&emsp;小波变换要做的就是将原始信号表示为一组小波基的线性组合，然后通过忽略其中不重要的部分达到数据压缩（即降维）的目的。&emsp;&emsp;所谓“小波函数”是一族函数，需要满足均值为0和在时间域、频域都局部化这两个条件。小波函数有很多种类，最简单的是Haar小波。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C++中resize函数在vector中的使用","slug":"C++中resize函数在vector中的使用","date":"2020-09-02T06:29:13.000Z","updated":"2020-09-02T06:54:30.077Z","comments":true,"path":"2020/09/02/C++中resize函数在vector中的使用/","link":"","permalink":"http://yoursite.com/2020/09/02/C++%E4%B8%ADresize%E5%87%BD%E6%95%B0%E5%9C%A8vector%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"&emsp;&emsp;在C++中typeid函数用于查看表达式的类型信息，包含在头文件 typeinfo 中。resize可以根据一个vector容器的大小为另一个容器开辟空间 #include&lt;iostream&gt;#include&lt;typeinfo&gt;#include&lt;opencv2/opencv.hpp&gt;int main()&#123; std::vector&lt;int&gt; layer_neuron_num = &#123; 400,80,2 &#125;; std::vector&lt;cv::Mat&gt; layer; // layer中包含三个Mat类型的数据 layer.resize(layer_neuron_num.size()); std::cout &lt;&lt; &quot;typeid(layer_neuron_num).name() = &quot; &lt;&lt; typeid(layer_neuron_num).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer_neuron_num.size()).name = &quot; &lt;&lt; typeid(layer_neuron_num.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer_neuron_num.size() = &quot; &lt;&lt; layer_neuron_num.size() &lt;&lt; std::endl; std::cout &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer).name() = &quot; &lt;&lt; typeid(layer).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;typeid(layer.size()).name() = &quot; &lt;&lt; typeid(layer.size()).name() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;layer.size() = &quot; &lt;&lt; layer.size() &lt;&lt; std::endl;&#125; vector的类型信息typeid(layer_neuron_num).name() = class std::vector&lt;int,class std::allocator &gt; vector.size()的类型信息typeid(layer_neuron_num.size()).name = unsigned __int64 layer_neuron_num的大小是3，表示包含三个int类型的数据layer_neuron_num.size() = 3 vector的类型信息typeid(layer).name() = class std::vector&lt;class cv::Mat,class std::allocator &gt; vector.size() 的类型信息typeid(layer.size()).name() = unsigned __int64 layer的大小为3，表示有3个Mat类型的数据layer.size() = 3","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"引用(Reference)","slug":"引用","date":"2020-08-30T08:31:12.000Z","updated":"2020-09-01T13:50:33.524Z","comments":true,"path":"2020/08/30/引用/","link":"","permalink":"http://yoursite.com/2020/08/30/%E5%BC%95%E7%94%A8/","excerpt":"","text":"1.引用即别名&emsp;&emsp;引用并非对象，相反地，它只是为一个已经存在的对象所起的另一个名字。定义了一个引用以后，对其进行的所有操作都是在与之绑定的对象上进行的。 2.引用和指针&emsp;&emsp;引用的本质是指针，引用是C++对裸露的内存地址（指针）做的包装。 1. 可以定义指针的引用，但不能定义引用的引用 指针的引用 ：rpa 绑定的是一个地址。 int a = 100;int *pa = &amp;a;int * &amp;rpa = pa; 引用的引用 ：与指针不同的是，引用没有二级引用，也就是说引用int&amp;类型对象的对象也是int&amp;类型。 int a = 100;int &amp;b = a;// int &amp;&amp; c = a; //errorint &amp; c = a; //ok 2. 可以定义指针的指针，但不能定义引用的指针 指针的指针 ：指向指针的指针也就是二级指针，在C++中这是合法的。 int a = 100;int * pa = &amp;a;int **ppa = &amp;pa; 引用的指针 ：引用只是一个别名。 int a = 100;int &amp; ra = a;// int&amp;* rpa = &amp;ra; // error 3. 可以定义指针数组，但不能定义引用数组，可以定义数组引用 指针数组 :即存放指针(地址)的数组 int a, b, c;int* arr[] = &#123;&amp;a, &amp;b, &amp;c&#125;; 引用数组 :非法定义，r是一个数组的首地址，int &amp;r[]相当于int&amp;*，前面提到引用的指针是不合法的。int a, b, c;// int &amp;r [] = {a, b ,c}; //error 数组引用 :arr 是int [5] 类型int arr[] = {1,2,3,4,5};int (&amp;rarr)[5] = arr; 3.常引用","categories":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]}